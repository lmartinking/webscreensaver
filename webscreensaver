#!/usr/bin/env python3

# WebScreensaver - Make any web page a screensaver

import os
import sys
import random
import signal
import json

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('GdkX11', '3.0')
gi.require_version('WebKit', '3.0')
gi.require_version('Soup', '2.4')
from gi.repository import Gtk, Gdk, GdkX11, Soup, WebKit, GLib


class BrowserPane(object):
	def __init__(self, url='http://www.google.com', scripts = None, reload_time=None, verbose=False, preview=True):
		self.scripts = scripts
		self.url = url

		self.reload_time = reload_time		
		self.reload_timerID = None
		self.reload_once = False
		self._reloading = False

		self.verbose = verbose
		self.browser = None
		self.preview = preview

	def get_browser(self):
		'''Sets up WebKit'''
		if self.browser:
			return self.browser
		
		self.browser = WebKit.WebView()

		# Try to enable webgl
		try:
			settings = self.browser.get_settings()
			settings.set_property('enable-webgl', True)
		except Exception as err:
			print("Could not enable WebGL: {}".format(err))

		# Take a stab at guessing whether we are running in the
		# XScreensaver preview window...
		if self.preview:
			self.browser.set_full_content_zoom(True)
			self.browser.set_zoom_level(0.4)
			self.reload_time = 2 # force reloading - enables quit from preview?!?

		self.browser.connect('onload-event', self.handle_on_load)
		self.browser.connect('load-error', self.load_error)
		self.browser.connect('resource-load-failed', self.resource_load_failed)

		self.browser.open(self.url)
		return self.browser
	
	def handle_on_load(self, view, frame):
		'''
		Handler for browser page load events.
		This will be executed for every frame within the browser.
		'''
		if self.reload_time and (self.reload_timerID is None):
			self.reload_timerID = GLib.timeout_add_seconds(self.reload_time, self.reload)

		if not self.scripts:
			return

		for script in self.scripts:
			print("Executing script: {}".format(script))
			self.browser.execute_script(script)
		
	def resource_load_failed(self, web_view, web_frame, uri, web_error):
		self.load_error(web_view, web_frame, uri, web_error)

	def load_error(self, web_view, web_frame, uri, web_error):
		if self._reloading:
			return
		reload_time = None
		if self.reload_timerID is None:
			if self.reload_time:
				reload_time = self.reload_time
			else:
				reload_time = 30 
				self.reload_once = True

		print("Error with \"{}\": {}".format(uri, web_error))
		if reload_time:
			if self.verbose: print(" --> Reloading in {}".format(reload_time))
			self.reload_timerID = GLib.timeout_add_seconds(reload_time, self.reload)

	def reload(self):
		if self.verbose: print("Reloading...")
		self._reloading = True
		self.browser.reload()
		self.browser.reload_bypass_cache()
		self._reloading = False
		if self.reload_once:
			self.reload_timerID = None
			self.reload_once = False
			return False
		return True

		
class WebScreensaver(object):
	'''
	A simple wrapper for WebKit which works as an XScreensaver Hack
	'''

	def __init__(self, url='http://www.google.com', window_id=None, scripts=None, cookie_file=None, cookie_file_readonly=False, reload_time=None, verbose=False, move=False):
		self.window_id = window_id
		self.scripts = scripts
		self.url = url
		self.cookie_file = cookie_file
		self.cookie_file_readonly = cookie_file_readonly

		self.reload_time = reload_time		
		self.verbose = verbose
		
		self.w = 640
		self.h = 480

		self.move = move
		self.preview = False
		self.browser_tree = None

		if move:
			self.move_width = 50
			self.move_height = 10
	
			self.inner_x = int(self.move_width / 2)
			self.inner_y = 0
			self.dir_x = 1
			self.dir_y = 1

			GLib.timeout_add(5000, self.move_window)
		else:
			self.move_width = 0
			self.move_height = 0
	
			self.inner_x = int(self.move_width / 2)
			self.inner_y = 0
			self.dir_x = 0
			self.dir_y = 0


	def setup_window(self):
		'''Perform some magic (if needed) to set up a Gtk window'''
		if self.window_id:
			self.win = Gtk.Window(Gtk.WindowType.POPUP)

			gdk_display = GdkX11.X11Display.get_default()
			self.gdk_win = GdkX11.X11Window.foreign_new_for_display(gdk_display, self.window_id)

			# We show the window so we get a Gdk Window,
			# then we we can reparent it...
			self.win.show()
			self.win.get_window().reparent(self.gdk_win, 0, 0)

			x, y, w, h = self.gdk_win.get_geometry()

			# Make us cover our parent window
			self.win.move(0, 0)
			self.win.set_default_size(w, h)
			self.win.set_size_request(w, h)

			self.w, self.h = w, h
		else:
			self.win = Gtk.Window()
			self.win.set_default_size(self.w, self.h)
		self.win.modify_bg( Gtk.StateType.NORMAL, Gdk.Color(0,0,0));
		
				# Take a stab at guessing whether we are running in the
		# XScreensaver preview window...
		if self.w < 330 and self.h < 250:
			self.preview = True

	def move_window(self):
		self.inner_x += self.dir_x
		self.inner_y += self.dir_y
		if self.inner_x >= self.move_width or self.inner_x <= 0:
			self.dir_x *= -1
		if self.inner_y >= self.move_height or self.inner_y <= 0:
			self.dir_y *= -1

		self.gtk_layout.move(self.scroll, self.inner_x, self.inner_y)
		return True

	def setup_cookie_jar(self):
		''' One cookie jar for all browsers if there are multiples
		'''
		if (self.cookie_file):
			cookiejar = Soup.CookieJarText.new(os.path.expanduser(self.cookie_file), self.cookie_file_readonly)
			cookiejar.set_accept_policy(Soup.CookieJarAcceptPolicy.ALWAYS)
			session = WebKit.get_default_session()
			session.add_feature(cookiejar)


	def _get_browser_tree(self, url):
		if type(url) is str:
			# should we store this globally for access?
			pane = BrowserPane(url, self.scripts, self.reload_time, self.verbose, self.preview)
			return pane.get_browser()
		else:
			#now we expect the dictionary:
			# (bool vertical, int split_percentage, url1, url2)
			# where those urls can be dictionaries again...
			
			vertical = url.get("vertical", True)
			
			# this is only correct for the first layer!
			if vertical:
				split_percentage = ((self.w - self.move_width) * url.get("split_percentage",50))/100
			else:
				split_percentage = ((self.h - self.move_height) * url.get("split_percentage",50))/100
			url1 = url["url1"]
			url2 = url["url2"]
			
			pane1 = self._get_browser_tree(url1)
			scroll_pane1 = Gtk.ScrolledWindow()
			scroll_pane1.add(pane1)
			scroll_pane1.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.NEVER)

			pane2 = self._get_browser_tree(url2)
			scroll_pane2 = Gtk.ScrolledWindow()
			scroll_pane2.add(pane2)
			scroll_pane2.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.NEVER)
						
			#doc says "they are arranged vertically" means the split is horizontally
			if vertical:
				pane = Gtk.HPaned()
			else:
				pane = Gtk.VPaned()

			pane.pack1(scroll_pane1, True, True)
			pane.pack2(scroll_pane2, True, True)
			pane.set_position(split_percentage)

			return pane

	def get_browser_tree(self):
		if self.browser_tree:
			return self.browser_tree
		else:
			return self._get_browser_tree(self.url)

	def setup_layout(self):
		'''Make sure the browser can expand without affecting the window'''
		self.gtk_layout = Gtk.Layout()

		self.scroll = Gtk.ScrolledWindow()
		self.scroll.add(self.get_browser_tree())
		self.scroll.set_policy(Gtk.PolicyType.EXTERNAL, Gtk.PolicyType.EXTERNAL)
		self.scroll.set_size_request(self.w - self.move_width, self.h - self.move_height)
		
		self.gtk_layout.put(self.scroll, self.inner_x, self.inner_y)

		self.win.add(self.gtk_layout)

	def setup(self):
		'''Do all the things!'''
		self.setup_window()
		self.setup_cookie_jar()
		self.setup_layout()
		

		def terminate(*args):
			Gtk.main_quit()

		self.win.connect('destroy', terminate)
		self.win.connect('delete-event', terminate)

		signal.signal(signal.SIGINT, signal.SIG_DFL)
		signal.signal(signal.SIGTERM, terminate)

		self.win.show_all()
		Gdk.Window.process_all_updates()

	@classmethod
	def determine_window_id(cls, win_id=None):
		'''Try and get an XID to use as our parent window'''
		if not win_id:
			win_id = os.getenv('XSCREENSAVER_WINDOW')

		if win_id:
			win_id = int(win_id, 16)
			if sys.version_info.major < 3:
				win_id = long(win_id)

		return win_id


class UserScripts(object):
	'''
	Some quick and dirty scripts to help us remove cruft from web pages
	'''

	@classmethod
	def remove_ids(cls, _id):
		script = '''
			(function() {
				var el = document.getElementById("%s");
				if (el) {
					el.parentNode.removeChild(el);
				}
			})();
		'''
		return script % _id

	@classmethod
	def remove_tags(cls, tag):
		script = '''
			(function() {
				var tags = document.getElementsByTagName("%s");
				if (tags && tags.length > 0) {
					for (var i = 0; i < tags.length; i++) {
						var el = tags[i];
						el.parentNode.removeChild(el);
					}
				}
			})();
		'''
		return script % tag


class WebHacks(object):
	'''
	A collection of neat HTML5/WebGL demos
	'''
	
	class Hack(object):
		__slots__ = "name url scripts".split(" ")

		def __init__(self, name, url=None, scripts=None):
			self.name, self.url, self.scripts = name, url, scripts

	hacks = (
		Hack('starfield',
			url='http://www.chiptune.com/starfield/starfield.html',
			scripts=[ UserScripts.remove_tags("iframe") ]
		),
		Hack('reactive-ball',
			url='http://lab.aerotwist.com/webgl/reactive-ball/',
			scripts=[ UserScripts.remove_ids("msg") ]
		),
		Hack('hatching-glow',
			url='http://www.ro.me/tech/demos/1/index.html',
			scripts=[ UserScripts.remove_ids("info") ]
		),
		Hack('shadow-map',
			url='http://alteredqualia.com/three/examples/webgl_shadowmap.html',
			scripts=[ UserScripts.remove_ids("info") ]
		),
		Hack('birds',
			url='http://mrdoob.github.com/three.js/examples/canvas_geometry_birds.html',
			scripts=[ UserScripts.remove_ids("info"), UserScripts.remove_ids("container") ]
		),

		Hack('gimme-shiny',		url='http://gimmeshiny.com/?seconds=30'),
		Hack('cell-shader',		url='http://www.ro.me/tech/demos/6/index.html'),
		Hack('kinect',			url='http://mrdoob.com/lab/javascript/webgl/kinect/'),
		Hack('conductor',		url='http://www.mta.me/'),

		Hack('flying-toasters',	url='http://bryanbraun.github.io/after-dark-css/all/flying-toasters.html'),
	)

	@classmethod
	def print_list(cls):
		for hack in cls.hacks:
			print("%15s\t%s" % (hack.name, hack.url))

	@classmethod
	def determine_screensaver(cls, name=None):
		for hack in cls.hacks:
			if hack.name == name:
				return hack

		# I'm feeling lucky :-)
		return random.choice(cls.hacks)


if __name__ == "__main__":
	import argparse
	parser = argparse.ArgumentParser(description='WebScreensaver: Run a web page as your screensaver')
	parser.add_argument('-window-id', help='XID of Window to draw on')
	parser.add_argument('-url', help='URL of page to display')
	parser.add_argument('-choose', help='Select a favourite')
	parser.add_argument('-list', action='store_true', help='List favourites')
	parser.add_argument('-cookie-file', metavar='PATH', help='Store cookies in PATH')
	parser.add_argument('-cookie-file-readonly', action='store_true', help='Set given cookie-store to read-only')
	parser.add_argument('-force-reload-time', metavar='SECONDS', help='Force reload in the given interval')
	parser.add_argument('-move', action='store_true', help='Try to "save the screen" by moving the content')
	parser.add_argument('-verbose', action='store_true', help='Verbose output for debugging')
	parser.add_argument('-config', metavar='FILE', help='Json config-file. Overrides all parameters! (default: ~/.config/webscreensaver')
	args = parser.parse_args()

	if args.list:
		WebHacks.print_list()
		sys.exit(0)

	url, scripts = None, None

	if args.url:
		url = args.url
	else:
		hack = WebHacks.determine_screensaver(args.choose)
		url, scripts = hack.url, hack.scripts

	cookie_file = args.cookie_file
	cookie_file_readonly = args.cookie_file_readonly
	force_reload_time = int(args.force_reload_time) if args.force_reload_time else None
	move = args.move

	config_file = args.config if args.config else os.path.expanduser(os.path.join("~", ".config", "webscreensaver"))
	if os.path.exists(config_file):
		config_content = open(config_file, "r")
		config = json.load(config_content, encoding="UTF-8")

		url = config["url"]
		cookie_file = config.get("cookie_file", cookie_file)
		cookie_file_readonly = bool(config.get("cookie_file_readonly", cookie_file_readonly))
		force_reload_time = config.get("force_reload_time", force_reload_time)
		move = bool(config.get("move", move))

	saver = WebScreensaver(
		url=url,
		window_id=WebScreensaver.determine_window_id(args.window_id),
		scripts=scripts,
		cookie_file=cookie_file,
		cookie_file_readonly=cookie_file_readonly,
		reload_time=force_reload_time,
		verbose=bool(args.verbose),
		move=move
	)
	saver.setup()

	Gtk.main()
